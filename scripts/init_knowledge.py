# scripts/init_knowledge.py
"""
Script d'initialisation de la Knowledge Base
- Cr√©e la structure de dossiers
- T√©l√©charge des documents de r√©f√©rence
- Initialise le RAG
- Teste les APIs
"""

import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     PyManager Knowledge Base Initialization       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

# =============================================================================
# 1. Create Directory Structure
# =============================================================================

print("üìÅ Creating directory structure...")

directories = [
    "knowledge",
    "knowledge/documents",
    "knowledge/embeddings",
    "knowledge/cache"
]

for directory in directories:
    dir_path = project_root / directory
    dir_path.mkdir(parents=True, exist_ok=True)
    print(f"   ‚úì {directory}")

# =============================================================================
# 2. Create Sample Documents
# =============================================================================

print("\nüìù Creating sample documents...")

sample_docs = {
    "sharpe_ratio.md": """# Ratio de Sharpe

## D√©finition
Le ratio de Sharpe est une mesure du rendement ajust√© au risque d'un investissement.

## Formule
```
Ratio de Sharpe = (Rendement Portfolio - Taux Sans Risque) / √âcart-type Portfolio
```

## Interpr√©tation
- **> 2.0**: Excellent (performance exceptionnelle)
- **1.0-2.0**: Tr√®s bon (bonne performance ajust√©e au risque)
- **0.5-1.0**: Acceptable (performance correcte)
- **< 0.5**: Faible (rendement insuffisant pour le risque pris)
- **< 0**: N√©gatif (perte, sous-performance du taux sans risque)

## Utilisation
Le ratio de Sharpe aide les investisseurs √†:
1. Comparer diff√©rents portfolios
2. √âvaluer si le rendement compense le risque
3. Optimiser l'allocation d'actifs

## Limites
- Suppose une distribution normale des rendements
- Ne capture pas tous les types de risques
- Sensible aux donn√©es extr√™mes (outliers)

## Exemple
Portfolio A: 15% rendement, 10% volatilit√©, taux sans risque 2%
Ratio de Sharpe = (15% - 2%) / 10% = 1.3 (Tr√®s bon)

Portfolio B: 20% rendement, 25% volatilit√©, taux sans risque 2%
Ratio de Sharpe = (20% - 2%) / 25% = 0.72 (Acceptable)

Conclusion: Portfolio A offre un meilleur rendement ajust√© au risque.
""",
    
    "diversification.md": """# Diversification de Portfolio

## Principe Fondamental
"Ne mettez pas tous vos ≈ìufs dans le m√™me panier"

La diversification consiste √† r√©partir les investissements sur diff√©rents actifs
pour r√©duire le risque global du portfolio.

## Pourquoi Diversifier?

### 1. R√©duction du Risque
- Le risque sp√©cifique peut √™tre √©limin√©
- Seul le risque syst√©matique (march√©) reste
- Lissage des rendements dans le temps

### 2. Protection
- Contre les chocs sectoriels
- Contre les √©v√©nements sp√©cifiques
- Contre la volatilit√© excessive

### 3. Optimisation
- Meilleur ratio risque/rendement
- Fronti√®re efficiente de Markowitz
- Portefeuille optimal

## Comment Diversifier?

### Par Classes d'Actifs
- **Actions**: 60% (croissance)
- **Obligations**: 30% (stabilit√©)
- **Liquidit√©s**: 10% (opportunit√©s)

### Par Secteurs
- Technologie: 20%
- Sant√©: 15%
- Finance: 15%
- Consommation: 15%
- Industrie: 15%
- Autres: 20%

**R√®gle**: Aucun secteur > 25%

### Par G√©ographie
- Domestique: 60%
- International d√©velopp√©: 30%
- March√©s √©mergents: 10%

### Par Capitalisation
- Large cap: 70% (stabilit√©)
- Mid cap: 20% (√©quilibre)
- Small cap: 10% (croissance)

## Niveau de Diversification Optimal

**Recherche acad√©mique:**
- 15-30 actions = ~90% des b√©n√©fices de diversification
- Au-del√† de 30 = rendements marginaux d√©croissants
- Trop de diversification = dilution des gains

## Sur-Diversification

**Attention aux pi√®ges:**
- Trop d'actifs ‚Üí gestion complexe
- Co√ªts de transaction √©lev√©s
- Dilution des meilleures opportunit√©s
- "Diworsification"

## R√©√©quilibrage

Fr√©quence recommand√©e: tous les 6-12 mois
- Vendre les gagnants sur√©valu√©s
- Acheter les perdants sous-√©valu√©s
- Maintenir l'allocation cible
""",

    "markowitz.md": """# Th√©orie Moderne du Portfolio (Markowitz)

## Histoire
D√©velopp√©e par Harry Markowitz en 1952, cette th√©orie r√©volutionnaire
lui a valu le Prix Nobel d'√âconomie en 1990.

## Concept Cl√©
Optimiser le ratio risque/rendement en construisant un portfolio efficient.

## Hypoth√®ses Fondamentales

1. **Investisseurs Rationnels**
   - Averses au risque
   - Pr√©f√®rent plus de rendement √† moins
   - Maximisent l'utilit√© esp√©r√©e

2. **Mesure du Risque**
   - Variance (√©cart-type) des rendements
   - Corr√©lation entre actifs
   - Matrice de covariance

3. **Efficience des March√©s**
   - Tous les investisseurs ont les m√™mes informations
   - Pas de co√ªts de transaction
   - Actifs divisibles

## Fronti√®re Efficiente

Ensemble des portfolios offrant:
- Le rendement maximal pour un niveau de risque donn√©
- Le risque minimal pour un rendement donn√©

## Formule Math√©matique

**Rendement du Portfolio:**
```
E(Rp) = Œ£ wi * E(Ri)
```

**Risque du Portfolio:**
```
œÉp¬≤ = Œ£ Œ£ wi * wj * œÉij
```

O√π:
- wi, wj = poids des actifs i et j
- E(Ri) = rendement esp√©r√© de l'actif i
- œÉij = covariance entre actifs i et j

## Portfolio Optimal

Trois strat√©gies principales:

### 1. Maximum Sharpe Ratio
- Meilleur rendement ajust√© au risque
- Point tangent sur la fronti√®re efficiente
- Recommand√© pour la plupart des investisseurs

### 2. Minimum Variance
- Risque minimal
- Convient aux investisseurs tr√®s conservateurs
- Peut avoir un rendement faible

### 3. Maximum Return
- Rendement maximal
- Risque √©lev√©
- Pour investisseurs agressifs

## Limites du Mod√®le

1. **Estimation des Param√®tres**
   - Difficile d'estimer rendements futurs
   - Matrices de covariance instables
   - Sensible aux donn√©es historiques

2. **Hypoth√®ses Irr√©alistes**
   - March√©s pas toujours efficients
   - Co√ªts de transaction existent
   - Distribution non normale

3. **Solutions Extr√™mes**
   - Poids parfois irr√©alistes
   - Positions concentr√©es
   - Instabilit√© des allocations

## Am√©liorations Modernes

- **Black-Litterman**: Int√®gre les vues d'experts
- **Robust Optimization**: G√®re l'incertitude
- **Risk Parity**: √âquilibre les contributions au risque

## Dans PyManager

Utilisez le Portfolio Builder:
1. S√©lectionnez vos actifs
2. Choisissez "Markowitz"
3. S√©lectionnez la strat√©gie (Sharpe/Risk/Return)
4. Le syst√®me calcule les poids optimaux
""",

    "black_litterman.md": """# Mod√®le Black-Litterman

## Introduction
D√©velopp√© par Fischer Black et Robert Litterman chez Goldman Sachs en 1990,
ce mod√®le r√©sout les probl√®mes pratiques du mod√®le de Markowitz.

## Probl√®mes R√©solus

### Issues du Mod√®le de Markowitz:
1. **Allocations Extr√™mes**: Poids trop concentr√©s
2. **Instabilit√©**: Petits changements ‚Üí grandes variations
3. **Pas de Point de D√©part**: Commencer avec une page blanche

### Solutions de Black-Litterman:
1. **√âquilibre du March√©**: Point de d√©part coh√©rent
2. **Int√©gration de Vues**: Incorpore vos convictions
3. **Allocations Stables**: R√©sultats plus r√©alistes

## Principe de Fonctionnement

### 1. √âquilibre du March√© (Prior)
Commence avec les capitalisations boursi√®res comme poids initiaux.

**Formule:**
```
Œ† = Œª * Œ£ * w_market
```
O√π:
- Œ† = rendements implicites d'√©quilibre
- Œª = coefficient d'aversion au risque
- Œ£ = matrice de covariance
- w_market = poids de march√©

### 2. Vues de l'Investisseur

**Types de vues:**
- **Absolues**: "L'action A aura 12% de rendement"
- **Relatives**: "A surperformera B de 3%"

**Formule des vues:**
```
P * Œº = Q + Œµ
```
O√π:
- P = matrice pick (d√©finit les actifs)
- Œº = rendements attendus
- Q = vues quantifi√©es
- Œµ = incertitude des vues

### 3. Combinaison (Posterior)

Combine l'√©quilibre et les vues via th√©or√®me de Bayes:

```
E[R] = [(œÑŒ£)‚Åª¬π + P'Œ©‚Åª¬πP]‚Åª¬π * [(œÑŒ£)‚Åª¬πŒ† + P'Œ©‚Åª¬πQ]
```

O√π:
- œÑ = param√®tre de scaling (ex: 0.05)
- Œ© = matrice d'incertitude des vues

## Exemple Pratique

### Donn√©es:
- Actions: AAPL, MSFT, GOOGL
- Poids de march√©: 40%, 35%, 25%

### Vues:
1. "AAPL va surperformer de 5%" (confiance: 80%)
2. "MSFT va mieux faire que GOOGL de 3%" (confiance: 60%)

### R√©sultat:
Black-Litterman ajuste les poids pour refl√©ter ces vues
tout en restant proche de l'√©quilibre de march√©.

## Avantages

1. **Point de D√©part Solide**: √âquilibre de march√©
2. **Flexibilit√©**: Ajoutez vos insights
3. **Stabilit√©**: Allocations plus r√©alistes
4. **Interpr√©tabilit√©**: Compr√©hension intuitive

## Param√®tres Cl√©s

### œÑ (Tau)
- Mesure l'incertitude sur l'√©quilibre
- Typiquement: 0.01 √† 0.05
- Plus grand œÑ = plus d'importance aux vues

### Confiance des Vues
- D√©termine le poids des vues
- Haute confiance = plus d'impact
- Faible confiance = reste proche √©quilibre

### Taux Sans Risque
- Base pour calculer les rendements exc√©dentaires
- Utiliser taux des bons du Tr√©sor

## Dans PyManager

1. Portfolio Builder ‚Üí "Black-Litterman"
2. Entrez vos vues (optionnel)
3. Ajustez les param√®tres (œÑ, confiance)
4. Le mod√®le calcule les poids optimaux

**Sans vues:** Retourne l'√©quilibre de march√© pur.
**Avec vues:** Ajuste selon vos convictions.
"""
}

for filename, content in sample_docs.items():
    file_path = project_root / "knowledge" / "documents" / filename
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"   ‚úì {filename}")

# =============================================================================
# 3. Initialize RAG
# =============================================================================

print("\nü§ñ Initializing RAG engine...")

try:
    from knowledge.rag_engine import SimpleRAG
    
    rag = SimpleRAG()
    rag.clear_index()  # Clear any existing index
    
    print("   üìö Indexing documents...")
    rag.add_documents_from_folder()
    
    stats = rag.get_stats()
    print(f"   ‚úì Indexed {stats['total_documents']} documents")
    print(f"   ‚úì Categories: {stats['categories']}")
    
except Exception as e:
    print(f"   ‚ùå Error initializing RAG: {e}")
    print("   üí° Install: pip install sentence-transformers")

# =============================================================================
# 4. Test Web Search
# =============================================================================

print("\nüåê Testing Web Search...")

try:
    from knowledge.web_search import WebSearchEngine
    
    search = WebSearchEngine()
    
    # Test DuckDuckGo
    print("   Testing DuckDuckGo...")
    results = search._search_duckduckgo("investissement portfolio", max_results=2)
    if results.get('results'):
        print(f"   ‚úì DuckDuckGo: {len(results['results'])} results")
    else:
        print("   ‚ö†Ô∏è DuckDuckGo: No results (might need internet)")
    
    # Test Wikipedia
    print("   Testing Wikipedia...")
    wiki_result = search._search_wikipedia("diversification")
    if wiki_result.get('found'):
        print(f"   ‚úì Wikipedia: Found '{wiki_result['title']}'")
    else:
        print("   ‚ö†Ô∏è Wikipedia: Not found")
    
except Exception as e:
    print(f"   ‚ùå Error testing web search: {e}")
    print("   üí° Install: pip install duckduckgo-search wikipedia-api")

# =============================================================================
# 5. Test FRED API
# =============================================================================

print("\nüìä Testing FRED API...")

fred_key = os.getenv('FRED_API_KEY') or input("Enter FRED API key (or press Enter to skip): ").strip()

if fred_key:
    try:
        from knowledge.fed_data import FREDDataProvider
        
        fred = FREDDataProvider(fred_key)
        
        if fred.fred:
            # Test basic query
            fed_rate = fred.get_latest_value('DFF')
            if fed_rate:
                print(f"   ‚úì FRED Connected: Fed Funds Rate = {fed_rate:.2f}%")
            
            # Test economic summary
            summary = fred.get_economic_summary()
            if 'indicators' in summary:
                print(f"   ‚úì Retrieved {len(summary['indicators'])} indicators")
        else:
            print("   ‚ùå FRED API not initialized")
    
    except Exception as e:
        print(f"   ‚ùå Error testing FRED: {e}")
        print("   üí° Install: pip install fredapi")
else:
    print("   ‚è≠Ô∏è  Skipped (no API key)")
    print("   üí° Get free key at: https://fred.stlouisfed.org/")

# =============================================================================
# 6. Test Integration
# =============================================================================

print("\nüß™ Testing Integration...")

try:
    print("   Testing RAG search...")
    if 'rag' in locals():
        results = rag.search("Qu'est-ce que le ratio de Sharpe?", top_k=2)
        if results:
            print(f"   ‚úì RAG returned {len(results)} results")
            print(f"   ‚úì Top result: {results[0]['metadata'].get('title', 'Unknown')} (score: {results[0]['score']:.3f})")
        else:
            print("   ‚ö†Ô∏è No RAG results")
    
except Exception as e:
    print(f"   ‚ùå Integration test failed: {e}")

# =============================================================================
# 7. Summary & Next Steps
# =============================================================================

print("\n" + "="*60)
print("‚úÖ Knowledge Base Initialization Complete!")
print("="*60)

print("\nüìã Summary:")
print("   - Directory structure created")
print("   - Sample documents created and indexed")
print("   - RAG engine initialized" if 'rag' in locals() else "   - RAG engine: ‚ö†Ô∏è Not available")
print("   - Web search tested" if 'search' in locals() else "   - Web search: ‚ö†Ô∏è Not available")
print("   - FRED API tested" if fred_key else "   - FRED API: ‚è≠Ô∏è Skipped")

print("\nüöÄ Next Steps:")
print("   1. Add your own documents to: knowledge/documents/")
print("   2. Run: python -c 'from knowledge.rag_engine import SimpleRAG; rag = SimpleRAG(); rag.add_documents_from_folder()'")
print("   3. Configure FRED_API_KEY in .streamlit/secrets.toml")
print("   4. Test AI Assistant with: streamlit run app3.py")

print("\nüí° Tips:")
print("   - Add PDF/MD/TXT files to knowledge/documents/")
print("   - RAG will automatically index them")
print("   - Web search cached for 24h")
print("   - FRED data for economic context")

print("\nüìö Documentation:")
print("   - RAG: knowledge/rag_engine.py")
print("   - Web Search: knowledge/web_search.py")
print("   - FRED: knowledge/fed_data.py")
print("   - AI Assistant: pagess/ai_assistant.py")

print("\n" + "="*60)
